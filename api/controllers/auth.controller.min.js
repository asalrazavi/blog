import User from"../models/user.model.js";import bcryptjs from"bcryptjs";import{errorHandler}from"../utils/error.js";import jwt from"jsonwebtoken";export const signup=async(req,res,next)=>{const{username:username,email:email,password:password}=req.body;username&&email&&password&&""!==username&&""!==email&&""!==password||next(errorHandler(400,"All fields are required"));const hashPassword=bcryptjs.hashSync(password,10),newUser=new User({username:username,email:email,password:hashPassword});try{await newUser.save(),res.json("signup successful")}catch(error){next(error)}};export const signin=async(req,res,next)=>{const{email:email,password:password}=req.body;email&&password&&""!==email&&""!==password||next(errorHandler(400,"All fields are required"));try{const validUser=await User.findOne({email:email});if(!validUser)return next(errorHandler(404,"User not found"));const validPassword=bcryptjs.compareSync(password,validUser.password);if(!validPassword)return next(errorHandler(400,"Invalid password"));const token=jwt.sign({id:validUser._id,isAdmin:validUser.isAdmin},process.env.JWT_SECRET),{password:pass,...rest}=validUser._doc;res.status(200).cookie("access_token",token,{httpOnly:!0}).json(rest)}catch(error){next(error)}};